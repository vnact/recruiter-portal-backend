name: ðŸŽ‰

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}
  GKE_ZONE: ${{ secrets.GKE_ZONE }}
  IMAGE_NAME: 'recruiter-cms'
  ENCRYPT_SECRET: 'secret'

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      imageTag: ${{ steps.setImageName.outputs.image }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
          registry-url: 'https://npm.pkg.github.com'
          scope: '@notekunn'
        env:
          NPM_AUTH_TOKEN: ${{ secrets.PAT }}

      - name: Create image tag
        run: echo "RELEASE_VERSION=prod-$(date +%s)" >> $GITHUB_ENV

      - id: auth
        name: Authenticate google cloud
        uses: google-github-actions/auth@v0
        with:
          token_format: 'access_token'
          credentials_json: ${{ secrets.GKE_SA_KEY }}

      - name: Login to GCR
        uses: docker/login-action@v2
        with:
          registry: gcr.io
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}

      - name: Create image name
        run: |
          echo "IMAGE_TAG=gcr.io/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}:${{ env.RELEASE_VERSION }}" >> $GITHUB_ENV

      - run: |
          encrypted=$(gpg --symmetric --batch --passphrase "$ENCRYPT_SECRET" --output - <(echo "${{ env.IMAGE_TAG }}") | base64 -w0)
          echo "image=$encrypted" >> $GITHUB_OUTPUT
        id: setImageName

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: ${{ env.IMAGE_TAG }}
          secrets: |
            "token=${{ secrets.PAT }}"
          secret-files: |
            "npmrc=${{ env.NPM_CONFIG_USERCONFIG }}"
  deploy:
    needs: build
    name: Deploy
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v3
      - run: |-
          image=$(gpg --decrypt --quiet --batch --passphrase "$ENCRYPT_SECRET" --output - <(echo "${{ needs.build.outputs.imageTag }}" | base64 --decode))
          echo "IMAGE_TAG=$image" >> $GITHUB_ENV

      - name: Replace tokens
        uses: cschleiden/replace-tokens@v1
        with:
          tokenPrefix: '${'
          tokenSuffix: '}'
          files: '["deploy/k8s/*.yaml"]'
        env:
          IMAGE_TAG: ${{ env.IMAGE_TAG }}

      - name: Authenticate google cloud
        uses: google-github-actions/auth@v0
        with:
          token_format: 'access_token'
          credentials_json: ${{ secrets.GKE_SA_KEY }}

      - uses: google-github-actions/setup-gcloud@v0
        name: Setup google cloud

      - uses: google-github-actions/get-gke-credentials@v0
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}

      - name: Deploy
        run: |-
          kubectl apply -f deploy/k8s/1-secret.yaml
          kubectl apply -f deploy/k8s/2-service.yaml
          kubectl apply -f deploy/k8s/3-ingress.yaml
